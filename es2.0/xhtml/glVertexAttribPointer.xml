<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glVertexAttribPointer</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /></head><body><div class="refentry"><a id="glVertexAttribPointer"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glVertexAttribPointer — define an array of generic vertex attribute data</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glVertexAttribPointer</strong>(</code></td><td>GLuint <var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">size</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>GLboolean <var class="pdparam">normalized</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">stride</var>, </td></tr><tr><td> </td><td>const void * <var class="pdparam">pointer</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>index</code></em></span></dt><dd><p>Specifies the index of the generic vertex
		    attribute to be modified.</p></dd><dt><span class="term"><em class="parameter"><code>size</code></em></span></dt><dd><p>Specifies the number of components per
		    generic vertex attribute. Must
		    be 1, 2, 3, or 4. The initial value is 4.</p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>Specifies the data type of each component in
		    the array. Symbolic constants
		    <code class="constant">GL_BYTE</code>,
		    <code class="constant">GL_UNSIGNED_BYTE</code>,
		    <code class="constant">GL_SHORT</code>,
		    <code class="constant">GL_UNSIGNED_SHORT</code>,
		    <code class="constant">GL_FIXED</code>, or
		    <code class="constant">GL_FLOAT</code> are
		    accepted. The initial value is <code class="constant">GL_FLOAT</code>.</p></dd><dt><span class="term"><em class="parameter"><code>normalized</code></em></span></dt><dd><p>Specifies whether fixed-point data values
		    should be normalized (<code class="constant">GL_TRUE</code>)
		    or converted directly as fixed-point values
		    (<code class="constant">GL_FALSE</code>) when they are
		    accessed.</p></dd><dt><span class="term"><em class="parameter"><code>stride</code></em></span></dt><dd><p>Specifies the byte offset between consecutive
		    generic vertex attributes. If <em class="parameter"><code>stride</code></em>
		    is 0, the generic vertex attributes are
		    understood to be tightly packed in the
		    array. The initial value is 0.</p></dd><dt><span class="term"><em class="parameter"><code>pointer</code></em></span></dt><dd><p>Specifies a pointer to the first component of
		    the first generic vertex attribute in the array. The initial value is 0.</p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p><code class="function">glVertexAttribPointer</code> specifies the
	location and data format of the array of generic vertex attributes at index <em class="parameter"><code>index</code></em>
	to use when rendering. <em class="parameter"><code>size</code></em>
	specifies the number of components per attribute and must be 1,
	2, 3, or 4. <em class="parameter"><code>type</code></em> specifies the data type
	of each component, and <em class="parameter"><code>stride</code></em> specifies
	the byte stride from one attribute to the next, allowing vertices and
	attributes to be packed into a single array or
	stored in separate arrays. 
        If set to <code class="constant">GL_TRUE</code>,
	<em class="parameter"><code>normalized</code></em> indicates that values stored
	in an integer format are to be mapped to the range [-1,1] (for
	signed values) or [0,1] (for unsigned values) when they are
	accessed and converted to floating point. Otherwise, values will
	be converted to floats directly without normalization.</p><p>If a non-zero named buffer object is bound to the <code class="constant">GL_ARRAY_BUFFER</code> target 
        (see <a class="citerefentry" href="glBindBuffer.xml"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>) while a generic vertex attribute array is
        specified, <em class="parameter"><code>pointer</code></em> is treated as a byte offset into the buffer object's data store.
        Also, the buffer object binding (<code class="constant">GL_ARRAY_BUFFER_BINDING</code>) is saved as generic vertex attribute array
        client-side state (<code class="constant">GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</code>) for index <em class="parameter"><code>index</code></em>.</p><p>When a generic vertex attribute array is specified,
	<em class="parameter"><code>size</code></em>, <em class="parameter"><code>type</code></em>,
	<em class="parameter"><code>normalized</code></em>,
	<em class="parameter"><code>stride</code></em>, and
	<em class="parameter"><code>pointer</code></em> are saved as client-side
	state, in addition to the current vertex array buffer object binding.</p><p>To enable and disable a generic vertex attribute array,
	call
	<a class="citerefentry" href="glEnableVertexAttribArray.xml"><span class="citerefentry"><span class="refentrytitle">glEnableVertexAttribArray</span></span></a>
	and
	<a class="citerefentry" href="glDisableVertexAttribArray.xml"><span class="citerefentry"><span class="refentrytitle">glDisableVertexAttribArray</span></span></a>
	with <em class="parameter"><code>index</code></em>. If enabled, the generic
	vertex attribute array is used when
        <a class="citerefentry" href="glDrawArrays.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a> or 
        <a class="citerefentry" href="glDrawElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a>
        is called.</p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>Each generic vertex attribute array is initially disabled
	and isn't accessed when
        <a class="citerefentry" href="glDrawElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a> or
        <a class="citerefentry" href="glDrawArrays.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a>
        is called.</p><p><code class="function">glVertexAttribPointer</code> is typically
	implemented on the client side.</p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p><code class="constant">GL_INVALID_ENUM</code> is generated if
	<em class="parameter"><code>type</code></em> is not an accepted value.</p><p><code class="constant">GL_INVALID_VALUE</code> is generated if
	<em class="parameter"><code>index</code></em> is greater than or equal to
	<code class="constant">GL_MAX_VERTEX_ATTRIBS</code>.</p><p><code class="constant">GL_INVALID_VALUE</code> is generated if
	<em class="parameter"><code>size</code></em> is not 1, 2, 3, or 4.</p><p><code class="constant">GL_INVALID_VALUE</code> is generated if
	<em class="parameter"><code>stride</code></em> is negative.</p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p><a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
	with argument <code class="constant">GL_MAX_VERTEX_ATTRIBS</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_ENABLED</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_SIZE</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_TYPE</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_STRIDE</code></p><p><a class="citerefentry" href="glGetVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and <code class="constant">GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</code></p><p><a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a> with argument 
        <code class="constant">GL_ARRAY_BUFFER_BINDING</code></p><p><a class="citerefentry" href="glGetVertexAttribPointerv.xml"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttribPointerv</span></span></a>
	with arguments <em class="parameter"><code>index</code></em> and
	<code class="constant">GL_VERTEX_ATTRIB_ARRAY_POINTER</code></p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><a class="citerefentry" href="glBindAttribLocation.xml"><span class="citerefentry"><span class="refentrytitle">glBindAttribLocation</span></span></a>,
        <a class="citerefentry" href="glBindBuffer.xml"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>,
	<a class="citerefentry" href="glDisableVertexAttribArray.xml"><span class="citerefentry"><span class="refentrytitle">glDisableVertexAttribArray</span></span></a>,
	<a class="citerefentry" href="glDrawArrays.xml"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a>,
	<a class="citerefentry" href="glDrawElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a>,
	<a class="citerefentry" href="glEnableVertexAttribArray.xml"><span class="citerefentry"><span class="refentrytitle">glEnableVertexAttribArray</span></span></a>,
	<a class="citerefentry" href="glVertexAttrib.xml"><span class="citerefentry"><span class="refentrytitle">glVertexAttrib</span></span></a></div><div class="refsect1"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.
        </p></div></div></body></html>