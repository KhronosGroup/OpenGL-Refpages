<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glTexParameter</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /></head><body><div class="refentry"><a id="glTexParameter"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glTexParameter — set texture parameters</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glTexParameterf</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>GLfloat <var class="pdparam">param</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glTexParameteri</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">param</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture of the active texture unit,
                    which must be either <code class="constant">GL_TEXTURE_2D</code> or
                    <code class="constant">GL_TEXTURE_CUBE_MAP</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>pname</code></em></span></dt><dd><p>
                    Specifies the symbolic name of a single-valued texture parameter.
                    <em class="parameter"><code>pname</code></em> can be one of the following:
                    <code class="constant">GL_TEXTURE_MIN_FILTER</code>,
                    <code class="constant">GL_TEXTURE_MAG_FILTER</code>,
                    <code class="constant">GL_TEXTURE_WRAP_S</code>, or
                    <code class="constant">GL_TEXTURE_WRAP_T</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>param</code></em></span></dt><dd><p>
                    Specifies the value of <em class="parameter"><code>pname</code></em>.
                </p></dd></dl></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glTexParameterfv</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glTexParameteriv</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>const GLint * <var class="pdparam">params</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters2"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture of the active texture unit,
                    which must be either <code class="constant">GL_TEXTURE_2D</code> or
                    <code class="constant">GL_TEXTURE_CUBE_MAP</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>pname</code></em></span></dt><dd><p>
                    Specifies the symbolic name of a texture parameter.
                    <em class="parameter"><code>pname</code></em> can be one of the following:
                    <code class="constant">GL_TEXTURE_MIN_FILTER</code>,
                    <code class="constant">GL_TEXTURE_MAG_FILTER</code>,
                    <code class="constant">GL_TEXTURE_WRAP_S</code>, or
                    <code class="constant">GL_TEXTURE_WRAP_T</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>params</code></em></span></dt><dd><p>
                    Specifies a pointer to an array where the value of 
                    <em class="parameter"><code>pname</code></em> is stored.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            Texture mapping is a technique that applies an image onto an object's surface
            as if the image were a decal or cellophane shrink-wrap.
            The image is created in texture space,
            with an 
            (<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>, 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">t</mml:mi></mml:math>)
            coordinate system.
            A texture is a two-dimensional or cube-mapped image and a set of parameters
            that determine how samples are derived from the image.
        </p><p>
            <code class="function">glTexParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the texture parameter
            specified as <em class="parameter"><code>pname</code></em>.
            <em class="parameter"><code>target</code></em> defines the target texture of the active texture unit,
            either <code class="constant">GL_TEXTURE_2D</code> or <code class="constant">GL_TEXTURE_CUBE_MAP</code>.
            The following symbols are accepted in <em class="parameter"><code>pname</code></em>:
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_TEXTURE_MIN_FILTER</code></span></dt><dd><p>
                        The texture minifying function is used whenever the pixel being textured
                        maps to an area greater than one texture element.
                        There are six defined minifying functions.
                        Two of them use the nearest one or nearest four texture elements
                        to compute the texture value.
                        The other four use mipmaps.
                    </p><p>
                        A mipmap is an ordered set of arrays representing the same image
                        at progressively lower resolutions.
                        If the texture has dimensions 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mi mathvariant="italic">w</mml:mi>
                                <mml:mo>×</mml:mo>
                                <mml:mi mathvariant="italic">h</mml:mi>
                            </mml:mrow>
                        </mml:math>,
                        there are
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mrow>
                                    <mml:mi mathvariant="italic">floor</mml:mi>
                                    <mml:mo>⁡</mml:mo>
                                    <mml:mfenced open="(" close=")">
                                    <mml:mrow>
                                        <mml:msub><mml:mi mathvariant="italic">log</mml:mi>
                                        <mml:mn>2</mml:mn>
                                        </mml:msub>
                                        <mml:mo>⁡</mml:mo>
                                        <mml:mfenced open="(" close=")">
                                        <mml:mrow>
                                            <mml:mi mathvariant="italic">max</mml:mi>
                                            <mml:mo>⁡</mml:mo>
                                            <mml:mfenced open="(" close=")">
                                                <mml:mi mathvariant="italic">w</mml:mi>
                                                <mml:mi mathvariant="italic">h</mml:mi>
                                            </mml:mfenced>
                                        </mml:mrow>
                                        </mml:mfenced>
                                    </mml:mrow>
                                    </mml:mfenced>
                                </mml:mrow>
                                <mml:mo>+</mml:mo>
                                <mml:mn>1</mml:mn>
                            </mml:mrow>
                        </mml:math>
                        mipmap levels.
                        The first mipmap level is the original texture,
                        with dimensions 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mi mathvariant="italic">w</mml:mi>
                                <mml:mo>×</mml:mo>
                                <mml:mi mathvariant="italic">h</mml:mi>
                            </mml:mrow>
                        </mml:math>.
                        Each subsequent mipmap level has dimensions 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mi mathvariant="italic">max</mml:mi>
                                <mml:mo>⁡</mml:mo>
                                <mml:mfenced open="(" close=")">
                                    <mml:mn>1</mml:mn>
                                    <mml:mrow>
                                        <mml:mi mathvariant="italic">floor</mml:mi>
                                        <mml:mo>⁡</mml:mo>
                                        <mml:mfenced open="(" close=")">
                                            <mml:mfrac>
                                                <mml:mi mathvariant="italic">w</mml:mi>
                                                <mml:msup><mml:mn>2</mml:mn>
                                                    <mml:mi mathvariant="italic">i</mml:mi>
                                                </mml:msup>
                                            </mml:mfrac>
                                        </mml:mfenced>
                                    </mml:mrow>
                                </mml:mfenced>
                                <mml:mo>×</mml:mo>
                                <mml:mi mathvariant="italic">max</mml:mi>
                                <mml:mo>⁡</mml:mo>
                                <mml:mfenced open="(" close=")">
                                    <mml:mn>1</mml:mn>
                                    <mml:mrow>
                                        <mml:mi mathvariant="italic">floor</mml:mi>
                                        <mml:mo>⁡</mml:mo>
                                        <mml:mfenced open="(" close=")">
                                            <mml:mfrac>
                                                <mml:mi mathvariant="italic">h</mml:mi>
                                                <mml:msup><mml:mn>2</mml:mn>
                                                    <mml:mi mathvariant="italic">i</mml:mi>
                                                </mml:msup>
                                            </mml:mfrac>
                                        </mml:mfenced>
                                    </mml:mrow>
                                </mml:mfenced>
                            </mml:mrow>
                        </mml:math>,
                        where 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mi mathvariant="italic">i</mml:mi>
                        </mml:math>
                        is the mipmap level,
                        until the final mipmap is reached,
                        which has dimension 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mn>1</mml:mn>
                                <mml:mo>×</mml:mo>
                                <mml:mn>1</mml:mn>
                            </mml:mrow>
                        </mml:math>.
                    </p><p>
                        To define the mipmap levels, call <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>, 
                        <a class="citerefentry" href="glCompressedTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCompressedTexImage2D</span></span></a>, 
                        or <a class="citerefentry" href="glCopyTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a>
                        with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps.
                        Level 0 is the original texture;
                        level 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mi mathvariant="italic">floor</mml:mi>
                                <mml:mo>⁡</mml:mo>
                                <mml:mfenced open="(" close=")">
                                <mml:mrow>
                                    <mml:msub><mml:mi mathvariant="italic">log</mml:mi>
                                    <mml:mn>2</mml:mn>
                                    </mml:msub>
                                    <mml:mo>⁡</mml:mo>
                                    <mml:mfenced open="(" close=")">
                                    <mml:mrow>
                                        <mml:mi mathvariant="italic">max</mml:mi>
                                        <mml:mo>⁡</mml:mo>
                                        <mml:mfenced open="(" close=")">
                                            <mml:mi mathvariant="italic">w</mml:mi>
                                            <mml:mi mathvariant="italic">h</mml:mi>
                                        </mml:mfenced>
                                    </mml:mrow>
                                    </mml:mfenced>
                                </mml:mrow>
                                </mml:mfenced>
                            </mml:mrow>
                        </mml:math>
                        is the final 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mn>1</mml:mn>
                                <mml:mo>×</mml:mo>
                                <mml:mn>1</mml:mn>
                            </mml:mrow>
                        </mml:math>
                        mipmap.
                    </p><p>
                        <em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the
                        following:
                        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_NEAREST</code></span></dt><dd><p>
                                        Returns the value of the texture element that is nearest
                                        (in Manhattan distance)
                                        to the center of the pixel being textured.
                                    </p></dd><dt><span class="term"><code class="constant">GL_LINEAR</code></span></dt><dd><p>
                                        Returns the weighted average of the four texture elements
                                        that are closest to the center of the pixel being textured.
                                    </p></dd><dt><span class="term"><code class="constant">GL_NEAREST_MIPMAP_NEAREST</code></span></dt><dd><p>
                                        Chooses the mipmap that most closely matches the size of the pixel
                                        being textured and uses the <code class="constant">GL_NEAREST</code> criterion
                                        (the texture element nearest to the center of the pixel)
                                        to produce a texture value.
                                    </p></dd><dt><span class="term"><code class="constant">GL_LINEAR_MIPMAP_NEAREST</code></span></dt><dd><p>
                                        Chooses the mipmap that most closely matches the size of the pixel
                                        being textured and uses the <code class="constant">GL_LINEAR</code> criterion
                                        (a weighted average of the four texture elements that are closest
                                        to the center of the pixel)
                                        to produce a texture value.
                                    </p></dd><dt><span class="term"><code class="constant">GL_NEAREST_MIPMAP_LINEAR</code></span></dt><dd><p>
                                        Chooses the two mipmaps that most closely match the size of the pixel
                                        being textured and uses the <code class="constant">GL_NEAREST</code> criterion
                                        (the texture element nearest to the center of the pixel)
                                        to produce a texture value from each mipmap.
                                        The final texture value is a weighted average of those two values.
                                    </p></dd><dt><span class="term"><code class="constant">GL_LINEAR_MIPMAP_LINEAR</code></span></dt><dd><p>
                                        Chooses the two mipmaps that most closely match the size of the pixel
                                        being textured and uses the <code class="constant">GL_LINEAR</code> criterion
                                        (a weighted average of the four texture elements that are closest
                                        to the center of the pixel)
                                        to produce a texture value from each mipmap.
                                        The final texture value is a weighted average of those two values.
                                    </p></dd></dl></div><p>
                    </p><p>
                        As more texture elements are sampled in the minification process,
                        fewer aliasing artifacts will be apparent.
                        While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be
                        faster than the other four,
                        they sample only one or four texture elements to determine the texture value
                        of the pixel being rendered and can produce moire patterns
                        or ragged transitions.
                        The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is
                        <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.
                    </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_MAG_FILTER</code></span></dt><dd><p>
                        The texture magnification function is used when the pixel being textured
                        maps to an area less than or equal to one texture element.
                        It sets the texture magnification function to either <code class="constant">GL_NEAREST</code>
                        or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster
                        than <code class="constant">GL_LINEAR</code>,
                        but it can produce textured images with sharper edges
                        because the transition between texture elements is not as smooth.
                        The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.
                        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_NEAREST</code></span></dt><dd><p>
                                        Returns the value of the texture element that is nearest
                                        (in Manhattan distance)
                                        to the center of the pixel being textured.
                                    </p></dd><dt><span class="term"><code class="constant">GL_LINEAR</code></span></dt><dd><p>
                                        Returns the weighted average of the four texture elements
                                        that are closest to the center of the pixel being textured.
                                    </p></dd></dl></div><p>
                        </p><p>
                        </p><p>
                    </p></dd></dl></div><p>
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_TEXTURE_WRAP_S</code></span></dt><dd><p>
                        Sets the wrap parameter for texture coordinate 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, or
                        <code class="constant">GL_REPEAT</code>.  <code class="constant">GL_CLAMP_TO_EDGE</code> causes 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        coordinates to be clamped to the
                        range 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mfenced open="[" close="]">
                                <mml:mfenced open="" close="">
                                    <mml:mrow>
                                        <mml:mfrac>
                                            <mml:mn>1</mml:mn>
                                            <mml:mn>2<mml:mi mathvariant="italic">N</mml:mi></mml:mn>
                                        </mml:mfrac>
                                    </mml:mrow>
                                </mml:mfenced>
                                <mml:mrow>
                                    <mml:mn>1</mml:mn>
                                    <mml:mo>-</mml:mo>
                                    <mml:mfenced open="" close="">
                                        <mml:mrow>
                                            <mml:mfrac>
                                                <mml:mn>1</mml:mn>
                                                <mml:mn>2<mml:mi mathvariant="italic">N</mml:mi></mml:mn>
                                            </mml:mfrac>
                                        </mml:mrow>
                                    </mml:mfenced>
                                </mml:mrow>
                            </mml:mfenced>
                        </mml:math>,
                        where 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">N</mml:mi></mml:math>
                        is the size
                        of the texture in the direction of clamping.  <code class="constant">GL_REPEAT</code> causes the
                        integer part of the 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        coordinate to be ignored; the GL uses only the
                        fractional part, thereby creating a repeating pattern.
                        <code class="constant">GL_MIRRORED_REPEAT</code> causes the 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        coordinate to be set to the
                        fractional part of the texture coordinate if the integer part of 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        is
                        even; if the integer part of 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        is odd, then the 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
                        texture coordinate is
                        set to 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mn>1</mml:mn>
                                <mml:mo>-</mml:mo>
                                <mml:mrow>
                                    <mml:mi mathvariant="italic">frac</mml:mi>
                                    <mml:mo>⁡</mml:mo>
                                    <mml:mfenced open="(" close=")">
                                        <mml:mi mathvariant="italic">s</mml:mi>
                                    </mml:mfenced>
                                </mml:mrow>
                            </mml:mrow>
                        </mml:math>,
                        where 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                            
                            <mml:mrow>
                                <mml:mi mathvariant="italic">frac</mml:mi>
                                <mml:mo>⁡</mml:mo>
                                <mml:mfenced open="(" close=")">
                                    <mml:mi mathvariant="italic">s</mml:mi>
                                </mml:mfenced>
                            </mml:mrow>
                        </mml:math>
                        represents the fractional part of
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>.
                        Initially,
                        <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.
                    </p></dd></dl></div><p>
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_TEXTURE_WRAP_T</code></span></dt><dd><p>
                        Sets the wrap parameter for texture coordinate 
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">t</mml:mi></mml:math>
                        to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, or
                        <code class="constant">GL_REPEAT</code>.  See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>.
                        Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.
                    </p></dd></dl></div></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            Suppose that a texture is accessed from a fragment shader or vertex shader and
            has set <code class="constant">GL_TEXTURE_MIN_FILTER</code> to one of the functions that requires
            mipmaps.  If either the dimensions of the texture images currently defined
            (with previous calls to <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>,
            <a class="citerefentry" href="glCompressedTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCompressedTexImage2D</span></span></a>,
            or <a class="citerefentry" href="glCopyTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a>) do not
            follow the proper sequence for mipmaps (described above), or there are
            fewer texture images defined than are needed, or the set of texture images
            were defined with different formats or types, then the texture image unit will return 
            (R, G, B, A) = (0, 0, 0, 1).
        </p><p>
            Similarly, if the width or height of a texture image are not powers of two and either the 
            <code class="constant">GL_TEXTURE_MIN_FILTER</code> is set to one of the functions that requires mipmaps
            or the <code class="constant">GL_TEXTURE_WRAP_S</code> or <code class="constant">GL_TEXTURE_WRAP_T</code> is not
            set to <code class="constant">GL_CLAMP_TO_EDGE</code>, then the texture image unit will return
            (R, G, B, A) = (0, 0, 0, 1).
        </p><p>
            <code class="function">glTexParameter</code>
            specifies the texture parameters for the texture bound to the active texture unit, specified
            by calling <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not
            one of the accepted defined values.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> 
            should have a defined symbolic 
            constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGetTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glGetTexParameter</span></span></a>
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>,
            <a class="citerefentry" href="glBindTexture.xml"><span class="citerefentry"><span class="refentrytitle">glBindTexture</span></span></a>,
            <a class="citerefentry" href="glCopyTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a>,
            <a class="citerefentry" href="glCopyTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage2D</span></span></a>,
            <a class="citerefentry" href="glPixelStorei.xml"><span class="citerefentry"><span class="refentrytitle">glPixelStorei</span></span></a>,
            <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>,
            <a class="citerefentry" href="glTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>
        </p></div><div class="refsect1"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.
        </p></div></div></body></html>