<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glCopyTexImage2D</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /></head><body><div class="refentry"><a id="glCopyTexImage2D"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glCopyTexImage2D — copy pixels into a 2D texture image</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glCopyTexImage2D</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">level</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">internalformat</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">x</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">y</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">width</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">height</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">border</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture of the active texture unit.
                    Must be <code class="constant">GL_TEXTURE_2D</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>level</code></em></span></dt><dd><p>
                    Specifies the level-of-detail number.
                    Level 0 is the base image level.
                    Level <span class="emphasis"><em>n</em></span> is the <span class="emphasis"><em>n</em></span>th mipmap reduction image.
                </p></dd><dt><span class="term"><em class="parameter"><code>internalformat</code></em></span></dt><dd><p>
                    Specifies the internal format of the texture.
                    Must be one of the following symbolic constants:
                    <code class="constant">GL_ALPHA</code>,
                    <code class="constant">GL_LUMINANCE</code>,
                    <code class="constant">GL_LUMINANCE_ALPHA</code>,
                    <code class="constant">GL_RGB</code>, or
                    <code class="constant">GL_RGBA</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>x</code></em>, </span><span class="term"><em class="parameter"><code>y</code></em></span></dt><dd><p>
                    Specify the window coordinates of the lower left corner
                    of the rectangular region of pixels to be copied.
                </p></dd><dt><span class="term"><em class="parameter"><code>width</code></em></span></dt><dd><p>
                    Specifies the width of the texture image.
                    All implementations support 2D texture images that are at least 64 texels
                    wide and cube-mapped texture images that are at least 16 texels wide.
                </p></dd><dt><span class="term"><em class="parameter"><code>height</code></em></span></dt><dd><p>
                    Specifies the height of the texture image.
                    All implementations support 2D texture images that are at least 64 texels
                    high and cube-mapped texture images that are at least 16 texels high.
                </p></dd><dt><span class="term"><em class="parameter"><code>border</code></em></span></dt><dd><p>
                    Specifies the width of the border.
                    Must be 0.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            Texturing maps a portion of a specified texture image 
            onto each graphical primitive for which texturing is
            active.  Texturing is active when the current fragment shader or
            vertex shader makes use of built-in texture lookup 
            functions.
        </p><p>
            <code class="function">glCopyTexImage2D</code> defines a two-dimensional texture image or cube-map texture image
            with pixels from the current framebuffer (rather than from
            client memory, as is the case for <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>).
        </p><p>
            The screen-aligned pixel rectangle with lower left corner at (<em class="parameter"><code>x</code></em>,
            <em class="parameter"><code>y</code></em>) and with a width of <em class="parameter"><code>width</code></em>
            and a height of <em class="parameter"><code>height</code></em>
            defines the texture array
            at the mipmap level specified by <em class="parameter"><code>level</code></em>.
            <em class="parameter"><code>internalformat</code></em> specifies the internal format of the texture array.
        </p><p>
            The pixels in the rectangle are processed exactly as if
            <a class="citerefentry" href="glReadPixels.xml"><span class="citerefentry"><span class="refentrytitle">glReadPixels</span></span></a> had been called with 
            <em class="parameter"><code>format</code></em> set to <code class="constant">GL_RGBA</code>, but the process stops just after
            conversion of RGBA values. Subsequent processing is identical to that
            described for <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>, 
            beginning with the clamping of the R, G, B, and A values to the range 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                
                <mml:mfenced open="[" close="]">
                    <mml:mn>0</mml:mn>
                    <mml:mn>1</mml:mn>
                </mml:mfenced>
            </mml:math>
            and then conversion to the texture's internal format for storage in the texel
            array.
        </p><p>
            The components required for <em class="parameter"><code>internalformat</code></em> must be a subset of
            those present in the framebuffer's format.  For example, a <code class="constant">GL_RGBA</code>
            framebuffer can be used to supply components for any <em class="parameter"><code>internalformat</code></em>.
            However, a <code class="constant">GL_RGB</code> framebuffer can only be used to supply components for
            <code class="constant">GL_RGB</code> or <code class="constant">GL_LUMINANCE</code> base internal format textures,
            not <code class="constant">GL_ALPHA</code>, <code class="constant">GL_LUMINANCE_ALPHA</code>, or
            <code class="constant">GL_RGBA</code> textures.
        </p><p>
            Pixel ordering is such that lower 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">x</mml:mi></mml:math>
            and 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">y</mml:mi></mml:math>
            screen coordinates correspond to
            lower 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">s</mml:mi></mml:math>
            and 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">t</mml:mi></mml:math>
            texture coordinates.
        </p><p>
            If any of the pixels within the specified rectangle are outside the framebuffer associated with the current
            rendering context, then the values obtained for those pixels are undefined.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            A GL implementation may choose to store the texture
            array at any internal resolution it chooses.
        </p><p>
            An image with height or width of 0 indicates a NULL texture.
        </p><p>
            <code class="function">glCopyTexImage2D</code>
            specifies a two-dimensional or cube-map texture for the current texture unit,
            specified with <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>internalformat</code></em> is not an
            accepted format.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>target</code></em> is one of the six cube map 2D image targets and the width and height parameters are not equal.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>level</code></em> is less than 0.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> may be generated if <em class="parameter"><code>level</code></em> is greater
            than 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                
                <mml:mrow>
                    <mml:msub><mml:mi mathvariant="italic">log</mml:mi>
                    <mml:mn>2</mml:mn>
                    </mml:msub>
                    <mml:mo>⁢</mml:mo>
                    <mml:mi mathvariant="italic">max</mml:mi>
                </mml:mrow>
            </mml:math>,
            where 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi mathvariant="italic">max</mml:mi></mml:math>
            is the returned value of <code class="constant">GL_MAX_TEXTURE_SIZE</code> when <em class="parameter"><code>target</code></em>
            is <code class="constant">GL_TEXTURE_2D</code> or <code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code> when
            <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> or <em class="parameter"><code>height</code></em> is less than 0
            or greater than <code class="constant">GL_MAX_TEXTURE_SIZE</code> when <em class="parameter"><code>target</code></em>
            is <code class="constant">GL_TEXTURE_2D</code> or <code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code> when
            <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>border</code></em> is not 0.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if 
            the currently bound framebuffer's format does not contain a superset of
            the components required by the base format of <em class="parameter"><code>internalformat</code></em>.
        </p><p>
            <code class="constant">GL_INVALID_FRAMEBUFFER_OPERATION</code> is generated if 
            the currently bound framebuffer is not framebuffer complete (i.e. the
            return value from <a class="citerefentry" href="glCheckFramebufferStatus.xml"><span class="citerefentry"><span class="refentrytitle">glCheckFramebufferStatus</span></span></a>
            is not <code class="constant">GL_FRAMEBUFFER_COMPLETE</code>).
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
            with argument <code class="constant">GL_MAX_TEXTURE_SIZE</code> or
            <code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>,
            <a class="citerefentry" href="glCheckFramebufferStatus.xml"><span class="citerefentry"><span class="refentrytitle">glCheckFramebufferStatus</span></span></a>,
            <a class="citerefentry" href="glCompressedTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCompressedTexImage2D</span></span></a>,
            <a class="citerefentry" href="glCompressedTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCompressedTexSubImage2D</span></span></a>,
            <a class="citerefentry" href="glCopyTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage2D</span></span></a>,
            <a class="citerefentry" href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>,
            <a class="citerefentry" href="glTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a>,
            <a class="citerefentry" href="glTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>
        </p></div><div class="refsect1"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.
        </p></div></div></body></html>