<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd"><!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glBindBuffer</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /></head><body><div class="refentry"><a id="glBindBuffer"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glBindBuffer — bind a named buffer to a target</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glBindBuffer</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLuint <var class="pdparam">buffer</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term">
                    <em class="parameter"><code>target</code></em>
                </span></dt><dd><p>
                    Specifies the target to which the buffer is bound.
                    The symbolic constant must be 
                    <code class="constant">GL_ARRAY_BUFFER</code>
                    or <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code>.
                    </p></dd><dt><span class="term">
                    <em class="parameter"><code>buffer</code></em>
                </span></dt><dd><p>Specifies the name of a buffer object.</p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
        <code class="function">glBindBuffer</code>
        lets you create or use a named buffer object.
        Calling <code class="function">glBindBuffer</code>
        with <em class="parameter"><code>target</code></em>
        set to <code class="constant">GL_ARRAY_BUFFER</code>
        or <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code>
        and <em class="parameter"><code>buffer</code></em> set to the name of the new buffer object 
        binds the buffer object name to the target. When a buffer object is bound to
        a target, the previous binding for that target is automatically broken.
        </p><p>
            <code class="function">glBindBuffer</code> lets you create or use a named buffer object. Calling <code class="function">glBindBuffer</code> with
            <em class="parameter"><code>target</code></em> set to
            <code class="constant">GL_ARRAY_BUFFER</code> or <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> and
            <em class="parameter"><code>buffer</code></em> set to the name
            of the new buffer object binds the buffer object name to the target.
            When a buffer object is bound to a target, the previous binding for that
            target is automatically broken.
        </p><p>
            Buffer object names are unsigned integers. The value zero is reserved, but
            there is no default buffer object for each buffer object target. Instead, <em class="parameter"><code>buffer</code></em> set to zero
            effectively unbinds any buffer object previously bound, and restores client memory usage for that buffer object target.
            Buffer object names and the corresponding buffer object contents are local to
            the shared buffer-object space (see eglCreateContext) of the current
            GL rendering context.
        </p><p>
            You may use <a class="citerefentry" href="glGenBuffers.xml"><span class="citerefentry"><span class="refentrytitle">glGenBuffers</span></span></a> to generate a set of new buffer object names.
        </p><p>
            The state of a buffer object immediately after it is first bound is an unmapped zero-sized memory buffer with
            <code class="constant">GL_READ_WRITE</code> access and <code class="constant">GL_STATIC_DRAW</code> usage.
        </p><p>
            While a non-zero buffer object name is bound, GL operations on the target to which it is
            bound affect the bound buffer object, and queries of the target to which it is bound return state 
            from the bound buffer object. While buffer object name zero is bound, as in the initial state,
            attempts to modify or query state on the target to which it is bound generates an 
            <code class="constant">GL_INVALID_OPERATION</code> error.
        </p><p>
            When vertex array pointer state is changed, for example by a call to 
            <a class="citerefentry" href="glNormalPointer.xml"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>, 
            the current buffer object binding (<code class="constant">GL_ARRAY_BUFFER_BINDING</code>) is copied into the 
            corresponding client state for the vertex array type being changed, for example 
            <code class="constant">GL_NORMAL_ARRAY_BUFFER_BINDING</code>. While a non-zero buffer object is bound to the 
            <code class="constant">GL_ARRAY_BUFFER</code> target, the vertex array pointer parameter that is traditionally
            interpreted as a pointer to client-side memory is instead interpreted as an offset within the
            buffer object measured in basic machine units.
        </p><p>
            While a non-zero buffer object is bound to the <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> target, 
            the indices parameter of <a class="citerefentry" href="glDrawElements.xml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a>
            that is traditionally
            interpreted as a pointer to client-side memory is instead interpreted as an offset within the
            buffer object measured in basic machine units.
        </p><p>
            A buffer object binding created with <code class="function">glBindBuffer</code> remains active until a different
            buffer object name is bound to the same target, or until the bound buffer object is
            deleted with <a class="citerefentry" href="glDeleteBuffers.xml"><span class="citerefentry"><span class="refentrytitle">glDeleteBuffers</span></span></a>.
        </p><p>
            Once created, a named buffer object may be re-bound to any target as often as needed. However,
            the GL implementation may make choices about how to optimize the storage of a buffer object based
            on its initial binding target.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p><code class="constant">GL_INVALID_ENUM</code> is generated if
        <em class="parameter"><code>target</code></em> is not one of the allowable values.</p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
            with argument <code class="constant">GL_ARRAY_BUFFER_BINDING</code> or 
            <code class="constant">GL_ELEMENT_ARRAY_BUFFER_BINDING</code>
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
        <a class="citerefentry" href="glBufferData.xml"><span class="citerefentry"><span class="refentrytitle">glBufferData</span></span></a>,
        <a class="citerefentry" href="glBufferSubData.xml"><span class="citerefentry"><span class="refentrytitle">glBufferSubData</span></span></a>,
        <a class="citerefentry" href="glDeleteBuffers.xml"><span class="citerefentry"><span class="refentrytitle">glDeleteBuffers</span></span></a>,
        <a class="citerefentry" href="glGenBuffers.xml"><span class="citerefentry"><span class="refentrytitle">glGenBuffers</span></span></a>
        </p></div><div class="refsect1"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 2003-2004
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.
        </p></div></div></body></html>