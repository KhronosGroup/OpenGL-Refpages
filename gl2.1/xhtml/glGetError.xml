<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd"><!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glGetError</title><meta name="generator" content="DocBook XSL Stylesheets Vsnapshot" /></head><body><div class="refentry"><a id="glGetError"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glGetError — return error information</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">GLenum <strong class="fsfunc">glGetError</strong>(</code></td><td> <var class="pdparam">void</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glGetError</code> returns the value of the error flag.
            Each detectable error is assigned a numeric code and symbolic name.
            When an error occurs,
            the error flag is set to the appropriate error code value.
            No other errors are recorded until <code class="function">glGetError</code> is called,
            the error code is returned,
            and the flag is reset to <code class="constant">GL_NO_ERROR</code>.
            If a call to <code class="function">glGetError</code> returns <code class="constant">GL_NO_ERROR</code>,
            there has been no detectable error since the last call to <code class="function">glGetError</code>,
            or since the GL was initialized.
        </p><p>
            To allow for distributed implementations,
            there may be several error flags.
            If any single error flag has recorded an error,
            the value of that flag is returned
            and that flag is reset to <code class="constant">GL_NO_ERROR</code>
            when <code class="function">glGetError</code> is called.
            If more than one flag has recorded an error,
            <code class="function">glGetError</code> returns and clears an arbitrary error flag value.
            Thus, <code class="function">glGetError</code> should always be called in a loop,
            until it returns <code class="constant">GL_NO_ERROR</code>,
            if all error flags are to be reset.
        </p><p>
            Initially, all error flags are set to <code class="constant">GL_NO_ERROR</code>.
        </p><p>
            The following errors are currently defined:
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_NO_ERROR</code></span></dt><dd><p>
                        No error has been recorded.
                        The value of this symbolic constant is guaranteed to be 0.
                    </p></dd><dt><span class="term"><code class="constant">GL_INVALID_ENUM</code></span></dt><dd><p>
                        An unacceptable value is specified for an enumerated argument.
                        The offending command is ignored
                        and has no other side effect than to set the error flag.
                    </p></dd><dt><span class="term"><code class="constant">GL_INVALID_VALUE</code></span></dt><dd><p>
                        A numeric argument is out of range.
                        The offending command is ignored
                        and has no other side effect than to set the error flag.
                    </p></dd><dt><span class="term"><code class="constant">GL_INVALID_OPERATION</code></span></dt><dd><p>
                        The specified operation is not allowed in the current state.
                        The offending command is ignored
                        and has no other side effect than to set the error flag.
                    </p></dd><dt><span class="term"><code class="constant">GL_STACK_OVERFLOW</code></span></dt><dd><p>
                        This command would cause a stack overflow.
                        The offending command is ignored
                        and has no other side effect than to set the error flag.
                    </p></dd><dt><span class="term"><code class="constant">GL_STACK_UNDERFLOW</code></span></dt><dd><p>
                        This command would cause a stack underflow.
                        The offending command is ignored
                        and has no other side effect than to set the error flag.
                    </p></dd><dt><span class="term"><code class="constant">GL_OUT_OF_MEMORY</code></span></dt><dd><p>
                        There is not enough memory left to execute the command.
                        The state of the GL is undefined,
                        except for the state of the error flags,
                        after this error is recorded.
                    </p></dd><dt><span class="term"><code class="constant">GL_TABLE_TOO_LARGE</code></span></dt><dd><p>
                        The specified table exceeds the implementation's maximum supported table
                        size.  The offending command is ignored and has no other side effect
                        than to set the error flag.
                    </p></dd></dl></div><p>
            When an error flag is set,
            results of a GL operation are undefined only if <code class="constant">GL_OUT_OF_MEMORY</code>
            has occurred.
            In all other cases,
            the command generating the error is ignored and has no effect on the GL state
            or frame buffer contents.
            If the generating command returns a value, it returns 0.
            If <code class="function">glGetError</code> itself generates an error, it returns 0.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            <code class="constant">GL_TABLE_TOO_LARGE</code> was introduced in GL version 1.2.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glGetError</code>
            is executed between the execution of <a class="citerefentry" href="glBegin.xml"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a>
            and the corresponding execution of <a class="citerefentry" href="glEnd.xml"><span class="citerefentry"><span class="refentrytitle">glEnd</span></span></a>.
            In this case, <code class="function">glGetError</code> returns 0.
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.
        </p></div></div></body></html>