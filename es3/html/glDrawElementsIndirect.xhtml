<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>glDrawElementsIndirect - OpenGL ES 3.2 Reference Pages</title>
    <link rel="stylesheet" type="text/css" href="opengl-man.css"/>
    <meta name="generator" content="DocBook XSL Stylesheets V1.79.2"/>
    <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                MathML: {
                    extensions: ["content-mathml.js"]
                },
                tex2jax: {
                    inlineMath: [['$','$'], ['\\(','\\)']]
                }
            });
        </script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"/>
  </head>
  <body>
    <header/>
    <div class="refentry" id="glDrawElementsIndirect">
      <div class="titlepage"/>
      <div class="refnamediv">
        <h2>Name</h2>
        <p>glDrawElementsIndirect — render indexed primitives from array data, taking parameters from memory</p>
      </div>
      <div class="refsynopsisdiv">
        <h2>C Specification</h2>
        <div class="funcsynopsis">
          <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
            <tr>
              <td>
                <code class="funcdef">void <strong class="fsfunc">glDrawElementsIndirect</strong>(</code>
              </td>
              <td>GLenum <var class="pdparam">mode</var>, </td>
            </tr>
            <tr>
              <td> </td>
              <td>GLenum <var class="pdparam">type</var>, </td>
            </tr>
            <tr>
              <td> </td>
              <td>const void *<var class="pdparam">indirect</var><code>)</code>;</td>
            </tr>
          </table>
          <div class="funcprototype-spacer"> </div>
        </div>
      </div>
      <div class="refsect1" id="parameters">
        <h2>Parameters</h2>
        <div class="variablelist">
          <dl class="variablelist">
            <dt>
              <span class="term">
                <em class="parameter">
                  <code>mode</code>
                </em>
              </span>
            </dt>
            <dd>
              <p>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <code class="constant">GL_POINTS</code>,
                    <code class="constant">GL_LINE_STRIP</code>,
                    <code class="constant">GL_LINE_LOOP</code>,
                    <code class="constant">GL_LINES</code>,
                    <code class="constant">GL_LINE_STRIP_ADJACENCY</code>,
                    <code class="constant">GL_LINES_ADJACENCY</code>,
                    <code class="constant">GL_TRIANGLE_STRIP</code>,
                    <code class="constant">GL_TRIANGLE_FAN</code>,
                    <code class="constant">GL_TRIANGLES</code>,
                    <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code>,
                    <code class="constant">GL_TRIANGLES_ADJACENCY</code>, and
                    <code class="constant">GL_PATCHES</code>
                    are accepted.
                </p>
            </dd>
            <dt>
              <span class="term">
                <em class="parameter">
                  <code>type</code>
                </em>
              </span>
            </dt>
            <dd>
              <p>
                    Specifies the type of data in the buffer bound to the <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> binding.
                </p>
            </dd>
            <dt>
              <span class="term">
                <em class="parameter">
                  <code>indirect</code>
                </em>
              </span>
            </dt>
            <dd>
              <p>
                    Specifies the address of a structure containing the draw parameters.
                </p>
            </dd>
          </dl>
        </div>
      </div>
      <div class="refsect1" id="description">
        <h2>Description</h2>
        <p>
            <code class="function">glDrawElementsIndirect</code> specifies multiple indexed geometric primitives
            with very few subroutine calls. <code class="function">glDrawElementsIndirect</code> behaves
            similarly to <a class="citerefentry" href="glDrawElementsInstanced.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawElementsInstanced</span></span></a>,
            except that the parameters to <a class="citerefentry" href="glDrawElementsInstanced.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawElementsInstanced</span></span></a>
            are stored in memory at the address given by <em class="parameter"><code>indirect</code></em> and the <span class="emphasis"><em>i</em></span>th element
            transferred by the corresponding draw call will be taken from element <em class="parameter"><code>indices</code></em>[i] + <em class="parameter"><code>baseVertex</code></em>
            of each enabled array. If the resulting value is larger than the maximum value representable by <em class="parameter"><code>type</code></em>,
            it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions).
            The operation is undefined if the sum would be negative.It also supports the addition of
            a value baseVertex to each index.
        </p>
        <p>
            The parameters addressed by <em class="parameter"><code>indirect</code></em> are packed into a structure
            that takes the form (in C):
        </p>
        <pre class="programlisting">    typedef  struct {
        uint  count;
        uint  instanceCount;
        uint  firstIndex;
        int   baseVertex;
        uint  reservedMustBeZero;
    } DrawElementsIndirectCommand;</pre>
        <p>
            <code class="function">glDrawElementsIndirect</code> is equivalent to:
        </p>
        <p>
</p>
        <pre class="programlisting">    void glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect)
    {
        const DrawElementsIndirectCommand *cmd  = (const DrawElementsIndirectCommand *)indirect;
        glDrawElementsInstancedBaseVertex(mode,
                                          cmd-&gt;count,
                                          type,
                                          cmd-&gt;firstIndex * size-of-type,
                                          cmd-&gt;instanceCount,
                                          cmd-&gt;baseVertex);
    }</pre>
        <p>
        </p>
        <p>
            If a buffer is bound to the <code class="constant">GL_DRAW_INDIRECT_BUFFER</code> binding at the time
            of a call to <code class="function">glDrawElementsIndirect</code>, <em class="parameter"><code>indirect</code></em>
            is interpreted as an offset, in basic machine units, into that buffer and the parameter
            data is read from the buffer rather than from client memory.
        </p>
        <p>
            Note that indices stored in client memory are not supported. If no buffer is bound to the
            <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> binding, an error will be generated.
        </p>
        <p>
            The results of the operation are undefined if the <code class="code">reservedMustBeZero</code> member
            of the parameter structure is non-zero. However, no error is generated in this case.
        </p>
        <p>
            Vertex attributes that are modified by <code class="function">glDrawElementsIndirect</code> have an
            unspecified value after <code class="function">glDrawElementsIndirect</code> returns. Attributes that aren't
            modified remain well defined.
        </p>
      </div>
      <div class="refsect1" id="notes">
        <h2>Notes</h2>
        <p>
            <code class="function">glDrawElementsInstancedBaseVertex</code> isn't actually present in OpenGL ES, but is used to describe this functionality.
        </p>
        <p>
            <code class="constant">GL_LINE_STRIP_ADJACENCY</code>,
            <code class="constant">GL_LINES_ADJACENCY</code>,
            <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code>,
            <code class="constant">GL_TRIANGLES_ADJACENCY</code> and
            <code class="constant">GL_PATCHES</code>
            are available only if the GL ES version is 3.2 or greater.
        </p>
      </div>
      <div class="refsect1" id="errors">
        <h2>Errors</h2>
        <p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if
            <em class="parameter"><code>mode</code></em> is not an accepted value.
        </p>
        <p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if zero
            is bound to the <code class="constant">GL_VERTEX_ARRAY_BINDING</code>,
            <code class="constant">GL_DRAW_INDIRECT_BUFFER</code>, or
            <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code> binding, or to any
            enabled vertex array.
                
        </p>
        <p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if the
            command would source data beyond the end of any bound buffer
            object.
        </p>
        <p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if
            <em class="parameter"><code>indirect</code></em> is not a multiple of the size,
            in basic machine units, of <code class="code">GLuint</code>.
        </p>
        <p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a
            geometry shader is active and <em class="parameter"><code>mode</code></em> is
            incompatible with the input primitive type of the geometry
            shader in the currently installed program object.
        </p>
      </div>
      <div class="refsect1" id="versions">
        <h2>API Version Support</h2>
        <div class="informaltable">
          <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
            <colgroup>
              <col style="text-align: left; "/>
              <col style="text-align: center; " class="firstvers"/>
              <col style="text-align: center; "/>
              <col style="text-align: center; "/>
              <col style="text-align: center; " class="lastvers"/>
            </colgroup>
            <thead>
              <tr>
                <th style="text-align: left; border-right: 2px solid ; ">
                 
            </th>
                <th style="text-align: center; border-bottom: 2px solid ; " colspan="4">
                <span class="bold"><strong>OpenGL ES API Version</strong></span>
            </th>
              </tr>
              <tr>
                <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>Function Name</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>2.0</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.0</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.1</strong></span>
            </th>
                <th style="text-align: center; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.2</strong></span>
            </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td style="text-align: left; border-right: 2px solid ; ">
                  <code class="function">glDrawElementsIndirect</code>
                </td>
                <td style="text-align: center; border-right: 2px solid ; ">-</td>
                <td style="text-align: center; border-right: 2px solid ; ">-</td>
                <td style="text-align: center; border-right: 2px solid ; ">✔</td>
                <td style="text-align: center; ">✔</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="refsect1" id="seealso">
        <h2>See Also</h2>
        <p>
            <a class="citerefentry" href="glDrawArrays.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a>,
            <a class="citerefentry" href="glDrawArraysInstanced.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawArraysInstanced</span></span></a>,
            <a class="citerefentry" href="glDrawArraysIndirect.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawArraysIndirect</span></span></a>,
            <a class="citerefentry" href="glDrawElements.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawElements</span></span></a>,
            <a class="citerefentry" href="glDrawRangeElements.xhtml"><span class="citerefentry"><span class="refentrytitle">glDrawRangeElements</span></span></a>,
        </p>
      </div>
      <div class="refsect1" id="Copyright">
        <h2>Copyright</h2>
        <p>
            Copyright <span class="trademark"/>© 2010-2019 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.
        </p>
      </div>
    </div>
    <footer/>
  </body>
</html>
