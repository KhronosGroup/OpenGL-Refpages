<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>glLinkProgram - OpenGL ES 3.2 Reference Pages</title>
    <link rel="stylesheet" type="text/css" href="opengl-man.css"/>
    <meta name="generator" content="DocBook XSL Stylesheets V1.79.2"/>
    <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                MathML: {
                    extensions: ["content-mathml.js"]
                },
                tex2jax: {
                    inlineMath: [['$','$'], ['\\(','\\)']]
                }
            });
        </script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"/>
  </head>
  <body>
    <header/>
    <div class="refentry" id="glLinkProgram">
      <div class="titlepage"/>
      <div class="refnamediv">
        <h2>Name</h2>
        <p>glLinkProgram — Links a program object</p>
      </div>
      <div class="refsynopsisdiv">
        <h2>C Specification</h2>
        <div class="funcsynopsis">
          <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
            <tr>
              <td>
                <code class="funcdef">void <strong class="fsfunc">glLinkProgram</strong>(</code>
              </td>
              <td>GLuint <var class="pdparam">program</var><code>)</code>;</td>
            </tr>
          </table>
          <div class="funcprototype-spacer"> </div>
        </div>
      </div>
      <div class="refsect1" id="parameters">
        <h2>Parameters</h2>
        <div class="variablelist">
          <dl class="variablelist">
            <dt>
              <span class="term">
                <em class="parameter">
                  <code>program</code>
                </em>
              </span>
            </dt>
            <dd>
              <p>Specifies the handle of the program object to be linked.</p>
            </dd>
          </dl>
        </div>
      </div>
      <div class="refsect1" id="description">
        <h2>Description</h2>
        <p><code class="function">glLinkProgram</code> links the program
        object specified by <em class="parameter"><code>program</code></em>. Shader objects 
        of type <code class="constant">GL_VERTEX_SHADER</code> attached to 
        <em class="parameter"><code>program</code></em> are used to
        create an executable that will run on the programmable vertex
        processor. Shader objects of type <code class="constant">GL_FRAGMENT_SHADER</code> 
        attached to <em class="parameter"><code>program</code></em> are used to create an
        executable that will run on the programmable fragment
        processor.</p>
        <p>The status of the link operation will be stored as part of
    the program object's state. This value will be set to
    <code class="constant">GL_TRUE</code> if the program object was linked
    without errors and is ready for use, and
    <code class="constant">GL_FALSE</code> otherwise. It can be queried by
    calling
    <a class="citerefentry" href="glGetProgramiv.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetProgramiv</span></span></a>
    with arguments <em class="parameter"><code>program</code></em> and
    <code class="constant">GL_LINK_STATUS</code>.</p>
        <p>As a result of a successful link operation, all active
    user-defined uniform variables belonging to
    <em class="parameter"><code>program</code></em> will be initialized to 0, and
    each of the program object's active uniform variables will be
    assigned a location that can be queried by calling
    <a class="citerefentry" href="glGetUniformLocation.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetUniformLocation</span></span></a>.
        All active uniforms belonging to the program’s named uniform blocks are 
        assigned offsets (and strides for array and matrix type uniforms) within 
        the uniform block. Also, any active user-defined attribute variables that have not
    been bound to a generic vertex attribute index will be bound to
    one at this time.</p>
        <p>Linking of a program object can fail for a number of
    reasons as specified in the <span class="emphasis"><em>OpenGL ES Shading Language
    Specification</em></span>. The following lists some of the
    conditions that will cause a link error.</p>
        <div class="itemizedlist">
          <ul class="itemizedlist" style="list-style-type: disc; ">
            <li class="listitem">
              <p>The program object contains objects to form either a vertex shader or a fragment shader, 
                is not separable, and does not contain objects to form both a vertex shader and a fragment shader.
                </p>
            </li>
            <li class="listitem">
              <p>The vertex and fragment shader do not use the same
                        shader language version.</p>
            </li>
            <li class="listitem">
              <p>The program object contains objects to form a geometry shader, is not separable,
        but does not contain objects to form a vertex shader.</p>
            </li>
            <li class="listitem">
              <p>The program object contains objects to form a geometry shader
        and the input primitive type, output primitive type, or maximum output
        vertex count is not specified in the compiled geometry shader
        object.</p>
            </li>
            <li class="listitem">
              <p>The number of active attribute variables supported
        by the implementation has been exceeded.</p>
            </li>
            <li class="listitem">
              <p>The storage limit for uniform variables has been
        exceeded.</p>
            </li>
            <li class="listitem">
              <p>The number of active uniform variables supported
        by the implementation has been exceeded.</p>
            </li>
            <li class="listitem">
              <p>The <code class="function">main</code> function is missing
        for the vertex or fragment shader.</p>
            </li>
            <li class="listitem">
              <p>A varying variable actually used in the fragment
        shader is not declared in the same way (or is not
        declared at all) in the vertex shader.</p>
            </li>
            <li class="listitem">
              <p>A reference to a function or variable name is
        unresolved.</p>
            </li>
            <li class="listitem">
              <p>A shared global is declared with two different
        types or two different initial values.</p>
            </li>
            <li class="listitem">
              <p>One or more of the attached shader objects has not
                been successfully compiled (via <a class="citerefentry" href="glCompileShader.xhtml"><span class="citerefentry"><span class="refentrytitle">glCompileShader</span></span></a>) 
                or loaded with a pre-compiled shader binary 
                                (via <a class="citerefentry" href="glShaderBinary.xhtml"><span class="citerefentry"><span class="refentrytitle">glShaderBinary</span></span></a>).</p>
            </li>
            <li class="listitem">
              <p>Binding a generic attribute matrix caused some
        rows of the matrix to fall outside the allowed maximum
        of <code class="constant">GL_MAX_VERTEX_ATTRIBS</code>.</p>
            </li>
            <li class="listitem">
              <p>Not enough contiguous vertex attribute slots could
        be found to bind attribute matrices.</p>
            </li>
            <li class="listitem">
              <p>Any variable name specified to <a class="citerefentry" href="glTransformFeedbackVaryings.xhtml"><span class="citerefentry"><span class="refentrytitle">glTransformFeedbackVaryings</span></span></a>
        in the <em class="parameter"><code>varyings</code></em> array is not declared as an output in the vertex shader.</p>
            </li>
            <li class="listitem">
              <p>Any two entries in the <em class="parameter"><code>varyings</code></em> array given
        <a class="citerefentry" href="glTransformFeedbackVaryings.xhtml"><span class="citerefentry"><span class="refentrytitle">glTransformFeedbackVaryings</span></span></a>
        specify the same varying variable.</p>
            </li>
            <li class="listitem">
              <p>The total number of components to capture in any transform feedback varying variable
        is  greater  than  the  constant <code class="constant">GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</code>
        and the buffer mode is <code class="constant">GL_SEPARATE_ATTRIBS</code>.</p>
            </li>
            <li class="listitem">
              <p>The total number of components to capture in any transform feedback varying variable
        is  greater  than  the  constant <code class="constant">GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</code>
        and the buffer mode is <code class="constant">GL_INTERLEAVED_ATTRIBS</code>.</p>
            </li>
          </ul>
        </div>
        <p>When a program object has been successfully linked, the
    program object can be made part of current state by calling
    <a class="citerefentry" href="glUseProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glUseProgram</span></span></a>.
    Whether or not the link operation was successful, the program
    object's information log will be overwritten. The information
    log can be retrieved by calling
    <a class="citerefentry" href="glGetProgramInfoLog.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetProgramInfoLog</span></span></a>.</p>
        <p><code class="function">glLinkProgram</code> will also install the
    generated executables as part of the current rendering state if
    the link operation was successful and the specified program
    object is already currently in use as a result of a previous
    call to
    <a class="citerefentry" href="glUseProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glUseProgram</span></span></a>.
    If the program object currently in use is relinked
    unsuccessfully, its link status will be set to
    <code class="constant">GL_FALSE</code> , but the executables and
    associated state will remain part of the current state until a
    subsequent call to <code class="function">glUseProgram</code> removes it
    from use. After it is removed from use, it cannot be made part
    of current state until it has been successfully relinked.</p>
        <p>The program object's information log is updated and the
    program is generated at the time of the link operation. After
    the link operation, applications are free to modify attached
    shader objects, compile attached shader objects, detach shader
    objects, delete shader objects, and attach additional shader
    objects. None of these operations affects the information log or
    the program that is part of the program object.</p>
      </div>
      <div class="refsect1" id="notes">
        <h2>Notes</h2>
        <p>If the link operation is unsuccessful, any information about a previous link operation on <em class="parameter"><code>program</code></em>
    is lost (i.e., a failed link does not restore the old state of <em class="parameter"><code>program</code></em>
    ). Certain information can still be retrieved from <em class="parameter"><code>program</code></em>
    even after an unsuccessful link operation. See for instance <a class="citerefentry" href="glGetActiveAttrib.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetActiveAttrib</span></span></a>
    and <a class="citerefentry" href="glGetActiveUniform.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetActiveUniform</span></span></a>.</p>
      </div>
      <div class="refsect1" id="errors">
        <h2>Errors</h2>
        <p><code class="constant">GL_INVALID_VALUE</code>
    is generated if <em class="parameter"><code>program</code></em>
    is not a value generated by OpenGL.</p>
        <p><code class="constant">GL_INVALID_OPERATION</code>
    is generated if <em class="parameter"><code>program</code></em>
    is not a program object.</p>
        <p><code class="constant">GL_INVALID_OPERATION</code>
    is generated if <em class="parameter"><code>program</code></em> is the currently active program
    object and transform feedback mode is active.</p>
      </div>
      <div class="refsect1" id="associatedgets">
        <h2>Associated Gets</h2>
        <p><a class="citerefentry" href="glGet.xhtml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
    with the argument <code class="constant">GL_CURRENT_PROGRAM</code></p>
        <p><a class="citerefentry" href="glGetActiveAttrib.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetActiveAttrib</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and the index of an active attribute variable</p>
        <p><a class="citerefentry" href="glGetActiveUniform.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetActiveUniform</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and the index of an active uniform variable<em class="parameter"><code/></em></p>
        <p><a class="citerefentry" href="glGetActiveUniformBlockiv.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetActiveUniformBlockiv</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and the index of an active uniform block<em class="parameter"><code/></em></p>
        <p><a class="citerefentry" href="glGetAttachedShaders.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetAttachedShaders</span></span></a>
    with argument <em class="parameter"><code>program</code></em></p>
        <p><a class="citerefentry" href="glGetAttribLocation.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetAttribLocation</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and an attribute variable name</p>
        <p><a class="citerefentry" href="glGetProgramiv.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetProgramiv</span></span></a>
    with arguments <em class="parameter"><code>program</code></em>
    and <code class="constant">GL_LINK_STATUS</code></p>
        <p><a class="citerefentry" href="glGetProgramInfoLog.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetProgramInfoLog</span></span></a>
    with argument <em class="parameter"><code>program</code></em></p>
        <p><a class="citerefentry" href="glGetUniform.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetUniform</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and a uniform variable location</p>
        <p><a class="citerefentry" href="glGetUniformLocation.xhtml"><span class="citerefentry"><span class="refentrytitle">glGetUniformLocation</span></span></a>
    with argument <em class="parameter"><code>program</code></em>
    and a uniform variable name</p>
        <p>
          <a class="citerefentry" href="glIsProgram.xhtml">
            <span class="citerefentry">
              <span class="refentrytitle">glIsProgram</span>
            </span>
          </a>
        </p>
      </div>
      <div class="refsect1" id="versions">
        <h2>API Version Support</h2>
        <div class="informaltable">
          <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
            <colgroup>
              <col style="text-align: left; "/>
              <col style="text-align: center; " class="firstvers"/>
              <col style="text-align: center; "/>
              <col style="text-align: center; "/>
              <col style="text-align: center; " class="lastvers"/>
            </colgroup>
            <thead>
              <tr>
                <th style="text-align: left; border-right: 2px solid ; ">
                 
            </th>
                <th style="text-align: center; border-bottom: 2px solid ; " colspan="4">
                <span class="bold"><strong>OpenGL ES API Version</strong></span>
            </th>
              </tr>
              <tr>
                <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>Function Name</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>2.0</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.0</strong></span>
            </th>
                <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.1</strong></span>
            </th>
                <th style="text-align: center; border-bottom: 2px solid ; ">
                <span class="bold"><strong>3.2</strong></span>
            </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td style="text-align: left; border-right: 2px solid ; ">glLinkProgram</td>
                <td style="text-align: center; border-right: 2px solid ; ">✔</td>
                <td style="text-align: center; border-right: 2px solid ; ">✔</td>
                <td style="text-align: center; border-right: 2px solid ; ">✔</td>
                <td style="text-align: center; ">✔</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="refsect1" id="seealso">
        <h2>See Also</h2>
        <p><a class="citerefentry" href="glAttachShader.xhtml"><span class="citerefentry"><span class="refentrytitle">glAttachShader</span></span></a>,
    <a class="citerefentry" href="glBindAttribLocation.xhtml"><span class="citerefentry"><span class="refentrytitle">glBindAttribLocation</span></span></a>,
    <a class="citerefentry" href="glCompileShader.xhtml"><span class="citerefentry"><span class="refentrytitle">glCompileShader</span></span></a>,
    <a class="citerefentry" href="glCreateProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glCreateProgram</span></span></a>,
    <a class="citerefentry" href="glDeleteProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glDeleteProgram</span></span></a>,
    <a class="citerefentry" href="glDetachShader.xhtml"><span class="citerefentry"><span class="refentrytitle">glDetachShader</span></span></a>,
    <a class="citerefentry" href="glUniform.xhtml"><span class="citerefentry"><span class="refentrytitle">glUniform</span></span></a>,
    <a class="citerefentry" href="glUseProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glUseProgram</span></span></a>,
    <a class="citerefentry" href="glValidateProgram.xhtml"><span class="citerefentry"><span class="refentrytitle">glValidateProgram</span></span></a></p>
      </div>
      <div class="refsect1" id="Copyright">
        <h2>Copyright</h2>
        <p>
            Copyright <span class="trademark"/>© 2003-2005 3Dlabs Inc. Ltd. 
            Copyright <span class="trademark"/>© 2010-2015 Khronos Group. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.
        </p>
      </div>
    </div>
    <footer/>
  </body>
</html>
